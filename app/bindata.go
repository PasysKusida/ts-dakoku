// Code generated by go-bindata.
// sources:
// assets/.index.html.swp
// assets/favicon.ico
// assets/index.html
// DO NOT EDIT!

package app

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtmlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xda\x3d\x8f\xd3\x30\x18\x07\xf0\xff\x21\xc1\x80\x48\xcb\x8b\x84\x18\x8d\x59\x49\xd2\x72\x20\x0e\x94\xde\xc2\x80\x6e\x60\x60\xb8\x1b\x18\x10\x4e\xe2\x26\x51\x1d\x3b\x8a\xdd\xbb\x76\x01\x09\x16\x36\xbe\x02\x5f\x84\x2f\xc0\xce\xcc\xc0\x17\x60\x84\x0d\xb9\x69\x7b\xbd\x93\x4e\xdc\x04\x3a\xe9\xf9\x2d\xc9\xe3\x38\x8f\x1f\xdb\xed\x50\xd5\xe9\xe0\x60\xef\x05\xdb\x89\x06\x00\x70\x1d\xb8\xb1\xff\xfe\xd5\xe3\xaf\x02\x57\xde\x00\xba\xb0\x38\x0f\x5d\xd8\x30\x13\x75\x33\xae\x5a\x19\xd6\x69\xd3\x9a\xe1\xa3\x48\x99\x4c\xa8\x93\xfd\xde\xea\xc2\xc6\x51\x61\x62\xdb\x66\x71\x51\xb9\x72\x9a\x46\x99\xa9\x63\xdf\xec\x6c\x98\x8b\x89\x99\x4c\x63\x61\xad\x74\x36\xae\x74\x2e\x67\x51\xe9\x6a\x75\xae\x1a\x08\x21\x7f\x13\x60\xfb\xc1\x70\xf1\x55\xbf\xc7\xef\xb2\x5b\x37\xf7\xff\x77\x41\x84\x10\x42\x08\x21\x84\x90\x7f\xc8\x35\x5b\x78\x07\xe0\xd2\x32\xbe\xbd\xbc\x6e\x9d\xba\x12\x42\x08\x21\x84\x10\x42\x08\x21\xe4\xe2\x12\x39\xf0\xe5\x1a\x30\x0c\xba\xff\xff\x57\xbf\xff\x7f\xf7\x81\x9f\x7d\xe0\x5b\x1f\xf8\xdc\x07\x3e\xf4\x81\xab\x7d\x00\x7d\xe0\x47\x0f\xf8\xd4\x03\xd2\x1e\x30\xec\x01\x77\x7a\xc0\xe5\x1e\xf0\x2b\x00\xbe\x07\xc0\xc7\x00\xa8\x03\xe0\x75\x00\xbc\x0c\x80\x67\x01\xf0\x24\x58\x8e\x41\x08\x21\x84\x10\x42\x08\x21\x17\x45\x12\x97\xae\x56\xbb\x60\x2c\x89\x53\x93\xcf\xfd\x9d\x97\xc4\xb5\xa8\xf4\x2a\xf2\x71\x73\x1c\xf8\x50\x6c\x86\x8c\x1d\x54\xf2\x88\x19\xcd\x9e\x2f\xce\x41\x6f\xf6\x14\xac\x6c\xe5\x78\xc4\x4b\xe7\x1a\xfb\x34\x3e\xf3\xa4\x34\x67\x99\x12\xd6\x8e\x78\xea\x34\x4b\x9d\x0e\x55\xb1\xb8\x58\x99\x19\x9d\x8b\x76\xce\x37\xaa\x69\x56\x9d\x95\x14\x39\x3f\xb3\xcc\x3d\xc7\x8e\x4c\x3b\xb1\xe7\x78\xb1\x1c\xae\x9e\x64\xe6\x50\xb6\x61\x29\x45\x5e\xe9\x82\xef\xae\x0b\x4c\xe2\x72\xb8\x5e\x1e\xbf\x3a\xac\x35\x4a\x8e\xb8\xbf\x5d\x17\x5f\x69\x2d\x5b\xb6\x48\xb1\xcc\x9e\xe4\xd5\xe1\xc9\xd4\x99\xd1\x4e\x54\xbe\x5f\x1e\x8e\x95\x9c\xb1\x32\x1c\x0e\x06\xac\x09\xb7\x59\x3d\x0b\xc5\xd4\x19\xe6\x9b\xc3\xcc\xa8\x69\xad\x99\x50\x55\xa1\xc3\xba\xca\x73\x25\x17\x39\x13\xbf\x51\xab\x94\x4e\xce\x5c\x98\x49\xed\x96\x03\x26\xb1\xaf\x7c\x39\xb4\xaa\xf4\x84\xb5\x52\x8d\xb8\x75\x73\x25\x6d\x29\xa5\xe3\xa7\xf6\xa3\x16\xb3\x2c\xd7\x51\x6a\x8c\xb3\xae\x15\x8d\x0f\xfc\xe6\xac\x1b\xe2\x87\xd1\x20\x1a\xc4\x99\xb5\xc7\x6d\x51\x5d\xe9\x28\xb3\x96\x33\x37\x6f\x64\x57\x85\xef\xb1\x9a\xb3\xab\x9c\x92\x9b\x4b\xd7\x35\x74\x0f\x6b\xe9\x04\xd3\xa2\x96\x23\xde\x9a\xd4\x38\xcb\x99\x5f\x12\xa9\xdd\x88\x6b\xb3\x38\x29\x7f\x9f\x69\x33\x36\x4a\x99\x23\xbe\xf9\x52\x56\x8a\xd6\x4a\x37\xe2\x53\x37\x0e\x77\xba\xf9\x76\xd3\x4d\xba\x8f\xf1\x9f\x00\x00\x00\xff\xff\xd7\x31\xa2\x31\x00\x30\x00\x00")

func assetsIndexHtmlSwpBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtmlSwp,
		"assets/.index.html.swp",
	)
}

func assetsIndexHtmlSwp() (*asset, error) {
	bytes, err := assetsIndexHtmlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.index.html.swp", size: 12288, mode: os.FileMode(384), modTime: time.Unix(1518490916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x62\x60\x60\x64\x60\x64\x10\x10\x60\x02\xd3\x1b\x18\x18\x18\xc4\x18\x18\x18\x34\x18\x18\x18\x04\x18\x18\x18\x14\x18\x20\xf2\x20\xd0\xc0\x80\x1d\xfc\xff\xff\x1f\x87\x0c\xf1\x00\x64\x04\x25\x18\x10\x00\x00\xff\xff\x7d\xe8\x67\x8d\xc6\x00\x00\x00")

func assetsFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_assetsFaviconIco,
		"assets/favicon.ico",
	)
}

func assetsFaviconIco() (*asset, error) {
	bytes, err := assetsFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/favicon.ico", size: 198, mode: os.FileMode(420), modTime: time.Unix(1518489935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xb1\x8e\xdb\x30\x0c\xdd\xef\x2b\x08\xcd\x95\x95\xa0\x1d\x8a\xc2\xce\x5a\xf4\x07\xba\xcb\x12\x63\x0b\x91\x48\x43\xa2\x2f\xce\xdf\x17\xb2\xeb\x9c\x53\x74\xb8\xc9\x34\xf9\xf8\xf8\xc8\xa7\x76\x94\x14\x2f\x6f\x00\xed\x88\xd6\xd7\x00\xa0\x4d\x28\x16\xdc\x68\x73\x41\xe9\xd4\x2c\x57\xfd\x5d\x1d\x4b\x64\x13\x76\x2a\x73\xcf\x52\x14\x38\x26\x41\x92\x4e\x11\x07\xf2\xb8\x7c\x01\xe2\x2b\xc7\xc8\xf7\xbd\x49\x82\x44\xbc\x48\xd1\xde\xde\xf8\x36\xb7\x66\x4b\x6c\xc5\x18\xe8\x06\x19\x63\xa7\x8a\x3c\x22\x96\x11\x51\x14\x8c\x19\xaf\x9d\x1a\x45\xa6\xf2\xc3\x98\x64\x17\xe7\xa9\xe9\x99\xa5\x48\xb6\x53\xfd\x71\x9c\xcc\x33\x61\xbe\x35\xa7\xe6\x64\x5c\x29\x1f\xb9\x26\x05\x6a\x5c\x29\x0a\xe4\x31\x61\xa7\x04\x17\xa9\x88\x55\x55\x6b\xf6\x7d\xdb\x9e\xfd\x03\x5c\xb4\xa5\x6c\x18\xed\x90\x04\xf3\x2e\xde\x87\xf7\xbd\xea\xf8\x1d\xb3\xae\xfb\xda\x40\x98\xc1\xeb\x6b\xc4\x05\x46\x7d\x3e\x9d\x60\xd2\x5f\x21\x2d\xda\xce\xc2\x50\xd3\xda\x71\x9c\x13\x81\x8d\x61\x20\x9d\x82\xf7\x11\xff\x72\xd6\x3b\xda\x40\x90\x39\x62\xa7\x6a\xa8\xf6\x11\x81\x2a\xf1\x3a\xe8\x09\xae\xe6\x9c\x5f\x35\x54\xf1\x81\x06\x75\x3c\xea\x78\x3e\x34\x4c\x3b\x3e\xa2\xf5\x07\x26\x80\x5f\x02\x77\xce\xb7\xf2\x81\x35\xd3\xa7\x1a\x5b\xfb\x8f\x2b\x43\x90\x71\xee\x57\x23\x68\x28\xe6\x29\xe5\xb9\x4c\x2f\x04\xbd\x90\x8e\xc3\xfa\x29\xe8\x98\xbc\xcd\x8f\x17\x5a\x80\xdf\x01\xef\xc0\x04\x3f\x57\xbe\xe3\x44\x63\x2f\xff\x93\xd9\x9a\x7a\xb3\xcd\xc6\xea\xde\xe5\xad\x35\xdb\x3b\xfe\x13\x00\x00\xff\xff\x4b\x33\x1a\x12\xcf\x02\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 719, mode: os.FileMode(420), modTime: time.Unix(1518490916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.index.html.swp": assetsIndexHtmlSwp,
	"assets/favicon.ico": assetsFaviconIco,
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".index.html.swp": &bintree{assetsIndexHtmlSwp, map[string]*bintree{}},
		"favicon.ico": &bintree{assetsFaviconIco, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

